#1
Given an integer n, print all the divisors of N in the ascending order.
CODE:
class Solution:
    def print_divisors(self, N):
        ans = []
        i = 1
        while i * i <= N:
            if N % i == 0:
                ans.append(i)
                if i != N // i:
                    ans.append(N // i)
            i += 1
        ans.sort()
        for d in ans:
            print(d, end=' ')

#2
Given a positive integer n, calculate and return all prime numbers less than or equal to n using the Sieve of Eratosthenes algorithm.
A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself.
CODE:
class Solution:
    def sieve(self, n):
        prime = [True] * (n + 1)
        prime[0] = prime[1] = False

        p = 2
        while p * p <= n:
            if prime[p]:
                for i in range(p * p, n + 1, p):
                    prime[i] = False
            p += 1

        return [i for i in range(2, n + 1) if prime[i]]

#3
You are given a string s consisting of lowercase English letters ('a' to 'z').

Your task is to:

Find the vowel (one of 'a', 'e', 'i', 'o', or 'u') with the maximum frequency.
Find the consonant (all other letters excluding vowels) with the maximum frequency.
Return the sum of the two frequencies.

Note: If multiple vowels or consonants have the same maximum frequency, you may choose any one of them. If there are no vowels or no consonants in the string, consider their frequency as 0.

The frequency of a letter x is the number of times it occurs in the string.

CODE:
class Solution(object):
    def maxFreqSum(self, s):
        """
        :type s: str
        :rtype: int
        """
        vowels='aeiou'
        v=defaultdict(int)
        c=defaultdict(int)
        for ch in s:
            if ch in vowels:
                v[ch]+=1
            if ch not in vowels:
                c[ch]+=1
        max_v=0
        for i in v.values():
            max_v=max(max_v,i)
        max_c=0
        for i in c.values():
            max_c=max(max_c,i)
        return max_v+max_c
        

        
#
