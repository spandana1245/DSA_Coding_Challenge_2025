#1
Given a number n, your task is to find the largest prime factor of n.
CODE:
#User function Template for python3

class Solution:
    def largestPrimeFactor(self, n):
        # code here
        maxPrime = -1
        while n % 2 == 0:
            maxPrime = 2
            n //= 2
        while n % 3 == 0:
            maxPrime = 3
            n //= 3
        i = 5
        while i * i <= n:
            while n % i == 0:
                maxPrime = i
                n //= i
            while n % (i + 2) == 0:
                maxPrime = i + 2
                n //= (i + 2)
            i += 6
        if n > 4:
            maxPrime = n
        return maxPrime

#2
Given two sorted arrays a[] and b[] of size n and m respectively, the task is to merge them in sorted order without using any extra space. Modify a[] so that it contains the first n elements and modify b[] so that it contains the last m elements.
CODE:
class Solution:
    def mergeArrays(self, a, b):
        # code here
        n = len(a)
        m = len(b)
        gap = (n + m + 1) // 2
        while gap > 0:
            i = 0
            j = gap
            while j < n + m:
                if j < n and a[i] > a[j]:
                    a[i], a[j] = a[j], a[i]
                elif i < n and j >= n and a[i] > b[j - n]:
                    a[i], b[j - n] = b[j - n], a[i]
                elif i >= n and b[i - n] > b[j - n]:
                    b[i - n], b[j - n] = b[j - n], b[i - n]
                i += 1
                j += 1
            if gap == 1:
                break
            gap = (gap + 1) // 2

#3
Given a wordlist, we want to implement a spellchecker that converts a query word into a correct word.

For a given query word, the spell checker handles two categories of spelling mistakes:

Capitalization: If the query matches a word in the wordlist (case-insensitive), then the query word is returned with the same case as the case in the wordlist.
Example: wordlist = ["yellow"], query = "YellOw": correct = "yellow"
Example: wordlist = ["Yellow"], query = "yellow": correct = "Yellow"
Example: wordlist = ["yellow"], query = "yellow": correct = "yellow"
Vowel Errors: If after replacing the vowels ('a', 'e', 'i', 'o', 'u') of the query word with any vowel individually, it matches a word in the wordlist (case-insensitive), then the query word is returned with the same case as the match in the wordlist.
Example: wordlist = ["YellOw"], query = "yollow": correct = "YellOw"
Example: wordlist = ["YellOw"], query = "yeellow": correct = "" (no match)
Example: wordlist = ["YellOw"], query = "yllw": correct = "" (no match)
In addition, the spell checker operates under the following precedence rules:

When the query exactly matches a word in the wordlist (case-sensitive), you should return the same word back.
When the query matches a word up to capitlization, you should return the first such match in the wordlist.
When the query matches a word up to vowel errors, you should return the first such match in the wordlist.
If the query has no matches in the wordlist, you should return the empty string.
Given some queries, return a list of words answer, where answer[i] is the correct word for query = queries[i].

CODE:
class Solution(object):
    def spellchecker(self, wordlist, queries):
        """
        :type wordlist: List[str]
        :type queries: List[str]
        :rtype: List[str]
        """
        def to_lower(s):
            return s.lower()

        def mask_vowels(s):
            return "".join('*' if c in "aeiou" else c for c in s.lower())

        # Exact words
        exact = set(wordlist)

        # First lowercase match
        case_map = {}
        for w in wordlist:
            lw = to_lower(w)
            if lw not in case_map:
                case_map[lw] = w

        # First vowel-masked match
        vowel_map = {}
        for w in wordlist:
            mw = mask_vowels(w)
            if mw not in vowel_map:
                vowel_map[mw] = w

        ans = []
        for q in queries:
            if q in exact:
                ans.append(q)
            elif to_lower(q) in case_map:
                ans.append(case_map[to_lower(q)])
            elif mask_vowels(q) in vowel_map:
                ans.append(vowel_map[mask_vowels(q)])
            else:
                ans.append("")
        return ans
        
